import random
import math
import matplotlib.pyplot as plt

random.seed(1234567890)

# XOR Problem !!!

# constant value
D = [[[1,0,0],0],[[1,0,1],1],[[1,1,0],1],[[1,1,1],0]]
D_size = len(D)

n1 = 2
n2 = 2
mu = 0.01
iterations = 10000

# logging list
log_E = []
log_z = []

class xornet:
    def __init__(self):
        self.n1 = n1 + 1    # add bias
        self.n2 = n2 + 1

        self.s = [[0.0] * self.n1 for i in range(self.n2)] # s[0]は使用しない
        self.w = [0.0] * self.n2

        self.delta_w = [0.0] * self.n2
        self.delta_s = [[0.0] * self.n1 for i in range(self.n2)] # s[0]は使用しない

        self.u = [0.0] * self.n2

        self.s[1][0] = 0.1
        self.s[1][1] = 0.2
        self.s[1][2] = 0.3
        '''
        x = [1,0,0]
        u[1] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[1] = sigmoid(0.1 * 1 + 0.2 * 0 + 0.3 * 0)
        u[1] = 0.52497918747894
        x = [1,0,1]
        u[1] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[1] = sigmoid(0.1 * 1 + 0.2 * 0 + 0.3 * 1)
        u[1] = 0.598687660112452
        x = [1,1,0]
        u[1] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[1] = sigmoid(0.1 * 1 + 0.2 * 1 + 0.3 * 0)
        u[1] = 0.574442516811659
        x = [1,1,1]
        u[1] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[1] = sigmoid(0.1 * 1 + 0.2 * 1 + 0.3 * 1)
        u[1] = 0.6456563062257954
        '''

        self.s[2][0] = 0.4
        self.s[2][1] = 0.5
        self.s[2][2] = 0.6
        '''
        x = [1,0,0]
        u[2] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[2] = sigmoid(0.4 * 1 + 0.5 * 0 + 0.6 * 0)
        u[2] = 0.598687660112452
        x = [1,0,1]
        u[2] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[2] = sigmoid(0.4 * 1 + 0.5 * 0 + 0.6 * 1)
        u[2] = 0.7310585786300049
        x = [1,1,0]
        u[2] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[2] = sigmoid(0.4 * 1 + 0.5 * 1 + 0.6 * 0)
        u[2] = 0.7109495026250039
        x = [1,1,1]
        u[2] = sigmoid(s[1][0] * x[0] + s[1][1] * x[1] + s[1][2] * x[2])
        u[2] = sigmoid(0.4 * 1 + 0.5 * 1 + 0.6 * 1)
        u[2] = 0.8175744761936437
        '''

        self.w[0] = 1.0
        self.w[1] = 2.0
        self.w[2] = 3.0
        '''
        x = [1,0,0]
        z = sigmoid(w[0] * u[0] + w[1] * u[1] + w[2] * u[2])
        z = sigmoid(1.0 * 1.0 + 2.0 * 0.52497918747894 + 3.0 * 0.598687660112452)
        z = 0.9790823274728573
        x = [1,0,1]
        z = sigmoid(w[0] * u[0] + w[1] * u[1] + w[2] * u[2])
        z = sigmoid(1.0 * 1.0 + 2.0 * 0.598687660112452 + 3.0 * 0.7310585786300049)
        z = 0.9877578305888958
        x = [1,1,0]
        z = sigmoid(w[0] * u[0] + w[1] * u[1] + w[2] * u[2])
        z = sigmoid(1.0 * 1.0 + 2.0 * 0.574442516811659 + 3.0 * 0.7109495026250039)
        z = 0.9863696672440037
        x = [1,1,1]
        z = sigmoid(w[0] * u[0] + w[1] * u[1] + w[2] * u[2])
        z = sigmoid(1.0 * 1.0 + 2.0 * 0.6456563062257954 + 3.0 * 0.8175744761936437)
        z = 0.9913716486748669
        '''

        # for j in range(1, self.n2):
        #     for k in range(self.n1):
        #         self.s[j][k] = random.normalvariate(0,0.1)

        # for j in range(self.n2):
        #     self.w[j] = random.normalvariate(0,0.1)

    def calc(self):
        a = random.randint(0, D_size - 1)
        a = 3

        self.x = D[a][0]
        self.y = D[a][1]

        self.x[0] = 1
        self.u[0] = 1.0

        for j in range(1, self.n2):
            sum = 0.0
            for k in range(self.n1):
                sum += self.s[j][k] * self.x[k] 
            self.u[j] = sigmoid(sum)

        sum = 0.0
        for j in range(self.n2):
            sum += self.w[j] * self.u[j]
        self.z = sigmoid(sum)

        self.E = (self.z - self.y) * (self.z - self.y) * 0.5
        

    def update(self):
        self.r = (self.y - self.z) * self.z * (1.0 - self.z)
        '''
        x = [1,0,0] y = 0
        r = (0 - 0.9790823274728573) * 0.9790823274728573 * (1.0 - 0.9790823274728573)
        r = -0.02005172698643477
        x = [1,0,1] y = 1
        r = (1 - 0.9877578305888958) * 0.9877578305888958 * (1.0 - 0.9877578305888958)
        r = 0.00014803596924545378
        x = [1,1,0] y = 1
        r = (1 - 0.9863696672440037) * 0.9863696672440037 * (1.0 - 0.9863696672440037)
        r = 0.00018325364643252687
        x = [1,1,1] y = 0
        r = (0 - 0.9913716486748669) * 0.9913716486748669 * (1.0 - 0.9913716486748669)
        r = -0.008480096799306003
        '''
        for j in range(self.n2):
            self.delta_w[j] = mu * self.r * self.u[j]
            self.w[j] += self.delta_w[j]
            
        '''
        delta_w[0]
        x = [1,0,0] y = 0
        delta_w[0] = 0.01 * -0.02005172698643477 * 1.0
        delta_w[0] = -0.0002005172698643477
        x = [1,0,1] y = 1
        delta_w[0] = 0.01 * 0.00014803596924545378 * 1.0
        delta_w[0] = 0.0000014803596924545378
        x = [1,1,0] y = 1
        delta_w[0] = 0.01 * 0.00018325364643252687 * 1.0
        delta_w[0] = 0.0000018325364643252687
        x = [1,1,1] y = 0
        delta_w[0] = 0.01 * -0.008480096799306003 * 1.0
        delta_w[0] = -0.00008480096799306003

        delta_w[1]
        x = [1,0,0] y = 0
        delta_w[1] = 0.01 * -0.02005172698643477 * 0.52497918747894
        delta_w[1] = -0.00010526739340888061
        x = [1,0,1] y = 1
        delta_w[1] = 0.01 * 0.00014803596924545378 * 0.598687660112452
        delta_w[1] = 8.862730804003963e-07
        x = [1,1,0] y = 1
        delta_w[1] = 0.01 * 0.00018325364643252687 * 0.574442516811659
        delta_w[1] = 1.0526868587161463e-06
        x = [1,1,1] y = 0
        delta_w[1] = 0.01 * -0.008480096799306003 * 0.6456563062257954
        delta_w[1] = -5.475227975877104e-05
        
        delta_w[2]
        x = [1,0,0] y = 0
        delta_w[2] = 0.01 * -0.02005172698643477 * 0.598687660112452
        delta_w[2] = -0.00012004721510722341
        x = [1,0,1] y = 1
        delta_w[2] = 0.01 * 0.00014803596924545378 * 0.7310585786300049
        delta_w[2] = 1.0822296526269657e-06
        x = [1,1,0] y = 1
        delta_w[2] = 0.01 * 0.00018325364643252687 * 0.7109495026250039
        delta_w[2] = 1.302840887854233e-06
        x = [1,1,1] y = 0
        delta_w[2] = 0.01 * -0.008480096799306003 * 0.8175744761936437
        delta_w[2] = -6.933110698764e-05
        '''
        self.rstar = [0.0] * self.n2
        for j in range(1, self.n2):
            self.rstar[j] = self.r * self.w[j] * self.u[j] * (1.0 - self.u[j])
            for k in range(self.n1):
                self.delta_s[j][k] = mu * self.rstar[j] * self.x[k]
                self.s[j][k] += self.delta_s[j][k]

        '''
        delta_s[1]
        x = [1,0,0] y = 0
        rstar = -0.02005172698643477 * (2.0 - 0.00010526739340888061) * 0.52497918747894 * (1.0 - 0.52497918747894)
        rstar = -0.01000031416860382
        x = [1,0,1] y = 1
        rstar = 0.00014803596924545378 * (2.0 + 8.862730804003963e-07) * 0.598687660112452 * (1.0 - 0.598687660112452)
        rstar = 7.11344962572462e-05
        x = [1,1,0] y = 1
        rstar = 0.00018325364643252687 * (2.0 + 1.0526868587161463e-06) * 0.574442516811659 * (1.0 - 0.574442516811659)
        rstar = 8.959580119427322e-05
        x = [1,1,1] y = 0
        rstar = -0.008480096799306003 * (2.0 - 5.475227975877104e-05) * 0.6456563062257954 * (1.0 - 0.6456563062257954)
        rstar = -0.00388011878487366

        delta_s[2]
        x = [1,0,0] y = 0
        rstar = -0.02005172698643477 * (3.0 - 0.00012004721510722341) * 0.598687660112452 * (1.0 - 0.598687660112452)
        rstar = -0.014452350292888064
        x = [1,0,1] y = 1
        rstar = 0.00014803596924545378 * (3.0 + 1.0822296526269657e-06) * 0.7310585786300049 * (1.0 - 0.7310585786300049)
        rstar = 8.731694580686027e-05
        x = [1,1,0] y = 1
        rstar = 0.00018325364643252687 * (3.0 + 1.302840887854233e-06) * 0.7109495026250039 * (1.0 - 0.7109495026250039)
        rstar = 0.00011297609105369321
        x = [1,1,1] y = 0
        rstar = -0.008480096799306003 * (3.0 - 6.933110698764e-05) * 0.8175744761936437 * (1.0 - 0.8175744761936437)
        rstar = -0.0037942413641439327
        '''


        '''
        delta_s[1][0]
        x = [1,0,0] y = 0
        delta_s[1][0] = 0.01 * -0.01000031416860382 * 1.0
        delta_s[1][0] = -0.0001000031416860382
        x = [1,0,1] y = 1
        delta_s[1][0] = 0.01 * 7.11344962572462e-05 * 1.0
        delta_s[1][0] = 7.113449625724619e-07
        x = [1,1,0] y = 1
        delta_s[1][0] = 0.01 * 8.959580119427322e-05 * 1.0
        delta_s[1][0] = 8.959580119427322e-07
        x = [1,1,1] y = 0
        delta_s[1][0] = 0.01 * -0.00388011878487366 * 1.0
        delta_s[1][0] = -3.88011878487366e-05

        delta_s[1][1]
        x = [1,0,0] y = 0
        delta_s[1][1] = 0.01 * -0.01000031416860382 * 0.0
        delta_s[1][1] = 0.0
        x = [1,0,1] y = 1
        delta_s[1][1] = 0.01 * 7.11344962572462e-05 * 0.0
        delta_s[1][1] = 0.0
        x = [1,1,0] y = 1
        delta_s[1][1] = 0.01 * 8.959580119427322e-05 * 1.0
        delta_s[1][1] = 8.959580119427322e-07
        x = [1,1,1] y = 0
        delta_s[1][1] = 0.01 * -0.00388011878487366 * 1.0
        delta_s[1][1] = -3.88011878487366e-05
        
        delta_s[1][2]
        x = [1,0,0] y = 0
        delta_s[1][2] = 0.01 * -0.01000031416860382 * 0.0
        delta_s[1][2] = 0.0
        x = [1,0,1] y = 1
        delta_s[1][2] = 0.01 * 7.11344962572462e-05 * 1.0
        delta_s[1][2] = 7.113449625724619e-07
        x = [1,1,0] y = 1
        delta_s[1][2] = 0.01 * 8.959580119427322e-05 * 0.0
        delta_s[1][2] = 0.0
        x = [1,1,1] y = 0
        delta_s[1][2] = 0.01 * -0.00388011878487366 * 1.0
        delta_s[1][2] = -3.88011878487366e-05




        delta_s[2][0]
        x = [1,0,0] y = 0
        delta_s[2][0] = 0.01 * -0.014452350292888064 * 1.0
        delta_s[2][0] = -0.00014452350292888064
        x = [1,0,1] y = 1
        delta_s[2][0] = 0.01 * 8.731694580686027e-05 * 1.0
        delta_s[2][0] = 8.731694580686027e-07
        x = [1,1,0] y = 1
        delta_s[2][0] = 0.01 * 0.00011297609105369321 * 1.0
        delta_s[2][0] = 1.1297609105369321e-06
        x = [1,1,1] y = 0
        delta_s[2][0] = 0.01 * -0.0037942413641439327 * 1.0
        delta_s[2][0] = -3.794241364143933e-05

        delta_s[2][1]
        x = [1,0,0] y = 0
        delta_s[2][1] = 0.01 * -0.014452350292888064 * 0.0
        delta_s[2][1] = 0.0
        x = [1,0,1] y = 1
        delta_s[2][1] = 0.01 * 8.731694580686027e-05 * 0.0
        delta_s[2][1] = 0.0
        x = [1,1,0] y = 1
        delta_s[2][1] = 0.01 * 0.00011297609105369321 * 1.0
        delta_s[2][1] = 1.1297609105369321e-06
        x = [1,1,1] y = 0
        delta_s[2][1] = 0.01 * -0.0037942413641439327 * 1.0
        delta_s[2][1] = -3.794241364143933e-05
        
        delta_s[2][2]
        x = [1,0,0] y = 0
        delta_s[2][2] = 0.01 * -0.014452350292888064 * 0.0
        delta_s[2][2] = 0.0
        x = [1,0,1] y = 1
        delta_s[2][2] = 0.01 * 8.731694580686027e-05 * 1.0
        delta_s[2][2] = 8.731694580686027e-07
        x = [1,1,0] y = 1
        delta_s[2][2] = 0.01 * 0.00011297609105369321 * 0.0
        delta_s[2][2] = 0.0
        x = [1,1,1] y = 0
        delta_s[2][2] = 0.01 * -0.0037942413641439327 * 1.0
        delta_s[2][2] = -3.794241364143933e-05
        '''

        
        


def sigmoid(x):
    return 1.0 / (1.0 + math.exp(-x))

def main():

    net = xornet()
    for i in range(iterations):
        net.calc()
        log_E.append(net.E)
        # print("time:" + str(i))
        # print("calc")
        # print("x:" + str(net.x))
        # print("y:" + str(net.y))
        # print("w:" + str(net.w))
        # print("s:" + str(net.s))
        # print("u:" + str(net.u))
        # print("z:" + str(net.z))
        net.update()
        # print("update")
        # print("x:" + str(net.x))
        # print("y:" + str(net.y))
        # print("r:" + str(net.r))
        # print("delta_w:" + str(net.delta_w))
        # print("rstar:" + str(net.rstar))
        # print("delta_s:" + str(net.delta_s))
    
    x_index = range(iterations)
    plt.plot(x_index, log_E)
    plt.show()
    # plt.plot(x_index, log_z)
    # plt.show()

if __name__ == "__main__":
    main()